@model List<Category>

@{
    ViewData["Title"] = "Purchase";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin-dashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          integrity="sha512-pO2eT+7Sf+SbLZQqZNRN9z8wqfVDUNvZ8Dd7QO1XqFFpsBZCmvB5aZ+0DkCpj7HO3kkqscXoqjxblcdm/CuLiw=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
}

<div class="dashboard-container">
    <aside class="sidebar">
        <div class="sidebar-header">Inventory</div>
        <nav class="sidebar-nav">
            <a href="@Url.Action("Index", "Admin")" class="nav-item">Dashboard</a>
            <a href="@Url.Action("Employees", "Admin")" class="nav-item">Employees</a>
            <a href="@Url.Action("Purchase", "Admin")" class="nav-item active">Category</a>
            <a href="@Url.Action("Stock", "Admin")" class="nav-item">Stock</a>
            <a href="@Url.Action("Menu", "Admin")" class="nav-item">Menu</a>
            <a href="@Url.Action("OrderList", "Admin")" class="nav-item">Order List</a>
        </nav>
        <a href="/AdminAuth/Logout" class="logout-btn">Log out</a>
    </aside>

    <main class="main-content">
        <div class="top-bar">
            <span class="greeting">Hello, @User.Identity?</span>
        </div>

        <!-- Add Category Form -->
        <div class="table-box">
            <div class="table-header">Add New Category</div>
            <form method="post" asp-action="AddCategory" asp-controller="Admin" class="category-form">
                @Html.AntiForgeryToken()
                <input type="text" name="categoryName" class="category-input" placeholder="Enter Category Name" required />
                <button type="submit" class="btn btn-primary">Add Category</button>
            </form>
        </div>

        <!-- Category List Table -->
        <div class="table-box">
            <div class="table-header">Category List</div>
            <table>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        int count = 1;
                        foreach (var category in Model)
                        {
                            <tr data-categoryid="@category.CategoryID">
                                <td>@count</td>
                                <td class="category-name">@category.CategoryName</td>
                                <td class="category-actions">
                                    <button type="button" class="edit-category-btn btn btn-primary btn-sm">Edit</button>
                                    <button type="button" class="delete-category-btn btn btn-danger btn-sm">Delete</button>
                                    <button type="button" class="finish-category-btn btn btn-success btn-sm d-none">Finish</button>
                                    <button type="button" class="discard-category-btn btn btn-secondary btn-sm d-none">Discard</button>
                                </td>
                            </tr>
                            count++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" style="text-align: center;">No categories available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </main>
</div>

<!-- Popup for confirmation (currently not in use) -->
<div id="popup-message" class="popup-message d-none">
    <p id="popup-text"></p>
    <div class="confirmation-buttons">
        <button id="confirm-action" class="btn btn-success">Yes</button>
        <button id="cancel-action" class="btn btn-danger">No</button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Edit
            document.querySelectorAll(".edit-category-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const nameCell = row.querySelector(".category-name");
                    const originalText = nameCell.textContent.trim();

                    nameCell.innerHTML = `<input type="text" class="edit-input form-control" value="${originalText}" />`;
                    row.setAttribute("data-original-name", originalText);

                    row.querySelector(".edit-category-btn").style.display = "none";
                    row.querySelector(".delete-category-btn").style.display = "none";
                    row.querySelector(".finish-category-btn").classList.remove("d-none");
                    row.querySelector(".discard-category-btn").classList.remove("d-none");
                });
            });

            // Finish (Update)
            document.querySelectorAll(".finish-category-btn").forEach(btn => {
                btn.addEventListener("click", async function () {
                    const row = this.closest("tr");
                    const categoryId = row.getAttribute("data-categoryid");
                    const newName = row.querySelector("input.edit-input").value.trim();

                    if (!newName) {
                        alert("Category name cannot be empty.");
                        return;
                    }

                    try {
                        const response = await fetch('/Admin/UpdateCategory', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({ categoryID: parseInt(categoryId), categoryName: newName })
                        });

                        const result = await response.json();

                        if (result.success) {
                            row.querySelector(".category-name").textContent = newName;
                            row.removeAttribute("data-original-name");
                        } else {
                            alert(result.message || "Update failed.");
                            row.querySelector(".category-name").textContent = row.getAttribute("data-original-name");
                        }
                    } catch (err) {
                        alert("Error updating category.");
                    }

                    row.querySelector(".edit-category-btn").style.display = "inline-block";
                    row.querySelector(".delete-category-btn").style.display = "inline-block";
                    row.querySelector(".finish-category-btn").classList.add("d-none");
                    row.querySelector(".discard-category-btn").classList.add("d-none");
                });
            });

            // Discard (Cancel Edit)
            document.querySelectorAll(".discard-category-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const originalName = row.getAttribute("data-original-name");

                    if (originalName) {
                        row.querySelector(".category-name").textContent = originalName;
                        row.removeAttribute("data-original-name");
                    }

                    row.querySelector(".edit-category-btn").style.display = "inline-block";
                    row.querySelector(".delete-category-btn").style.display = "inline-block";
                    row.querySelector(".finish-category-btn").classList.add("d-none");
                    row.querySelector(".discard-category-btn").classList.add("d-none");
                });
            });

            // Delete
            document.querySelectorAll(".delete-category-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const categoryId = row.getAttribute("data-categoryid");
                    const categoryName = row.querySelector(".category-name").textContent;

                    if (confirm(`Are you sure you want to delete the category "${categoryName}"? This action cannot be undone.`)) {
                        fetch('/Admin/DeleteCategory', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({ categoryId: parseInt(categoryId) })
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    row.remove();
                                    document.querySelectorAll('tbody tr').forEach((tr, idx) => {
                                        tr.querySelector('td:first-child').textContent = idx + 1;
                                    });
                                } else {
                                    alert(data.message || "Failed to delete category.");
                                }
                            })
                            .catch(() => alert("Error deleting category."));
                    }
                });
            });
        });
    </script>
}
